{"version":3,"sources":["components/Github/Github.module.css","components/Search.tsx","components/UsersList.tsx","components/Timer.tsx","components/UserDetails.tsx","components/Github/Github.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Search","props","useState","tempSearch","setTempSearch","useEffect","value","FormControl","style","marginBottom","placeholder","onChange","e","currentTarget","onBlur","showing","Button","variant","onClick","onSubmit","UsersList","users","setUsers","axios","get","term","then","res","data","items","map","u","className","selectedUser","s","selected","onUserSelect","login","id","Timer","seconds","setSeconds","intervalId","setInterval","prev","clearInterval","timerKey","Card","Body","UserDetails","user","userDetails","setUserDetails","toString","followers","src","avatar_url","alt","Github","initialSearchState","setSelectedUser","showingButton","setShowingButton","searchTerm","setSearchTerm","document","title","Container","marginTop","Row","Col","xs","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f85531e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Github_container__16HfU\",\"selected\":\"Github_selected__2sQ2C\"};","import React, { useState, useEffect } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { SearchPropsType } from '../../types/types'\r\n\r\nexport const Search = (props: SearchPropsType) => {\r\n\tconst [tempSearch, setTempSearch] = useState('')\r\n\r\n\tuseEffect(() => {\r\n\t\tsetTempSearch(props.value)\r\n\t}, [props.value])\r\n\r\n\treturn <><FormControl style={{ marginBottom: 10 + \"px\" }} placeholder=\"search\"\r\n\t\t\t\tvalue={tempSearch}\r\n\t\t\t\tonChange={(e) => setTempSearch(e.currentTarget.value)}\r\n\t\t\t\tonBlur={(e: any) => props.onBlur(tempSearch)} />\r\n\t\t\t\t{props.showing &&\r\n\t\t\t\t <Button variant=\"primary\" onClick={() => {\r\n\t\t\t\t\t\tprops.onSubmit(tempSearch)\r\n\t\t\t\t} }>find</Button>\r\n\t\t\t }\r\n\t\t\t\t</>\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport s from './../components/Github/Github.module.css'\r\n\r\nimport {\r\n\tUsersListPropsType,\r\n\tSearchUserType,\r\n\tSearchResult\r\n} from './../../types/types'\r\n\r\nexport const UsersList = (props: UsersListPropsType) => {\r\n\tconst [users, setUsers] = useState<SearchUserType[]>([])\r\n\r\n\tuseEffect(() => {\r\n    axios\r\n\t\t.get<SearchResult>(`https://api.github.com/search/users?q=${props.term}`)\r\n    .then(res => {\r\n      setUsers(res.data.items)\r\n    })\r\n\t}, [props.term])\r\n\r\n\treturn <ul>\r\n\t{users\r\n\t.map(u => <li key={u.id}\r\n\tclassName={props.selectedUser === u ? s.selected : ''}\r\n\tonClick={() => {\r\n\t\tprops.onUserSelect(u)\r\n\r\n\t}}>{u.login}</li>)}\r\n</ul>\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { TimerPropsType } from '../../types/types'\r\n\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nexport const Timer = (props: TimerPropsType) => {\r\n\tconst [seconds, setSeconds] = useState(10)\r\n\tuseEffect(() => {\r\n\t\tsetSeconds(props.seconds)\r\n\t}, [props.seconds])\r\n\r\n\tuseEffect(() => {\r\n\t\tprops.onChange(seconds)\r\n\t}, [seconds])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst intervalId = setInterval(() => {\r\n\t\t\tsetSeconds(prev => prev - 1)\r\n\t\t}, 1000)\r\n\r\n\t\treturn () => { clearInterval(intervalId) }\r\n\t}, [props.timerKey])\r\n\r\n\treturn <>\r\n\t<Card>\r\n  \t<Card.Body>\r\n\t\t\t{seconds}\r\n\t\t</Card.Body>\r\n\t</Card></>\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport {\r\n\tUserDetailsPropsType,\r\n\tUserType,\r\n} from './../../types/types'\r\nimport { Timer } from './Timer'\r\n\r\nconst startTimerValue = 10\r\nexport const UserDetails = ({user}: UserDetailsPropsType) => {\r\n\tconst [userDetails, setUserDetails] = useState<UserType | null>(null)\r\n\tconst [seconds, setSeconds] = useState(10)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!!user) {\r\n\t\t\taxios\r\n\t\t\t.get<UserType>(`https://api.github.com/users/${user.login}`)\r\n\t\t\t.then(res => {\r\n\t\t\t\tsetSeconds(startTimerValue)\r\n\t\t\t\tsetUserDetails(res.data)\r\n\t\t\t})\r\n\t\t}\r\n\t}, [user])\r\n\r\n\tuseEffect(() => {\r\n     if (seconds < 1) {\r\n\t\t\t setUserDetails(null)\r\n\t\t }\r\n\t}, [seconds])\r\n\r\n\treturn <>\r\n\t\t\t\t{\r\n\t\t\t\t\tuserDetails && <div>\r\n\t\t\t\t\t\t<Timer seconds={seconds} onChange={setSeconds} timerKey={userDetails.id.toString()}/>\r\n\t\t\t\t\t\t<h2>Details</h2>\r\n\t\t\t\t\t{userDetails.login}, followers: {userDetails.followers}\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<img src={userDetails.avatar_url} alt=\"avatar\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t</>\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport s from './Github.module.css'\r\n\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport {\r\n\tSearchUserType,\r\n} from './../../../types/types'\r\nimport { Search } from './../Search'\r\nimport { UsersList } from './../UsersList'\r\nimport { UserDetails } from './../UserDetails'\r\n\r\nexport const Github = () => {\r\n\tlet initialSearchState = 'julia-rosehub'\r\n\tconst [selectedUser, setSelectedUser] = useState<SearchUserType | null>(null)\r\n\tconst [showingButton, setShowingButton] = useState(false)\r\n\tconst [searchTerm, setSearchTerm] = useState(initialSearchState)\r\n\r\n\tconst onBlur = (value: string) => {\r\n\t\tif (value !== searchTerm) {\r\n\t\t\tsetShowingButton(true)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (selectedUser) {\r\n\t\t\tdocument.title = selectedUser.login\r\n\t\t}\r\n\t}, [selectedUser])\r\n\r\n\treturn <Container style={{ marginTop: 20 + \"px\" }}>\r\n\t\t<Row>\r\n\t\t<Col>\r\n\t\t\t<Search value={searchTerm} onSubmit={setSearchTerm} onBlur={onBlur} showing={showingButton} />\r\n\t\t\t{' '}\r\n\t\t\t<Button variant=\"primary\" onClick={() => {\r\n\t\t\t\tsetSearchTerm(initialSearchState)\r\n\t\t\t\tsetShowingButton(false)\r\n\t\t\t}}>reset</Button>\r\n\t\t</Col>\r\n\t\t<Col>\r\n\t\t\t\t<UsersList term={searchTerm} selectedUser={selectedUser} onUserSelect={setSelectedUser} />\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={6}>\r\n\t\t\t\t<UserDetails user={selectedUser} />\r\n\t\t</Col>\r\n\t\t</Row>\r\n\t\t</Container>\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Github } from './components/Github/Github';\n\nfunction App() {\n  return (\n\t\t<div>\n\t\t\t<nav className=\"navbar navbar-light bg-light\">\n         <a className=\"navbar-brand\">Working with Github API</a>\n      </nav>\n        <Github />\n\t\t</div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}